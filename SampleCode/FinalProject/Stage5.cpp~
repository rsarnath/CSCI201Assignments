// A payroll template C++ program  
  
#include <iostream>  
#include <fstream>  
#include <cstring>  
#include <iomanip>  
#include "employee.h"
using namespace std;  
  
  
/*------------------------------------------------------------------------  
data structures (structs, arrays, variables and constants) to store the information  
-------------------------------------------------------------------------*/  
  
const int maxSize = 20; //at most 20 employees  
const int nameLength = employee::nameLength;   
const int idLength = employee::idLength; // 8-character Id  
  
int empCount=0;//tracks how many employees we currently have  
//empCount also gives the index of the next empty cell in all   
//the arrays  
  

  
employee employeeList[maxSize];  
  
employee e; //dummy employee, used for invalid searches  
  


/*------------------------------------------------------------------------  
Functions for handling and processing the list of  employees  
-------------------------------------------------------------------------*/  
  
void writeData(ostream& outfile)  
{  
  for(int index = 0; index < empCount; index++)  
    {  
      employeeList[index].writeEmployee(outfile);
    }  
}  
  
bool addEmployee(employee e)  
{   
  if (empCount >= maxSize)  
    {   
      // we have run out of space  
      return false;  
    }  
  else   
    {  
      employeeList[empCount] = e;  
      empCount++;  
      return true;  
    }  
}  
  
void processEmpList()
{  
  // processes the payroll for the list of employees.
  
  for (int i = 0; i < empCount; i++)  
    employeeList[i].processEmployee();  
}

employee& searchById(char Id[], bool& found)  
{  
  //returns a ref to the employee if there is a match;   
  // found is false otherwise.  
  
  for (int i = 0; i < empCount; i++)  
    {  
        if (strcmp(Id, employeeList[i].getId()) == 0)  
	  {  
	    found = true;  
	    return  employeeList[i];  
	  }  
    }  
  return e;  
}  
  
employee& searchByName(char name[], bool& found)  
{  
  //returns a ref to the employee if there is a match;   
  // found is false otherwise.  
  
  found = false;  
  for (int i = 0; i < empCount; i++)  
    {  
        if (strcmp(name, employeeList[i].getName()) == 0)  
	  {  
	    found = true;   
	    return employeeList[i];  
	  }  
    }  
  
  return e; //dummy employee  
}  
  
  
void printTable(ostream& outfile)  
{  
  for(int i = 0; i < empCount; i++)  
    {  
      employeeList[i].printRecord( outfile);  
    }  
}   
  

  
  
/*------------------------------------------------------------------------  
  Functions used by main program and the user interface  
  ------------------------------------------------------------------------*/  
  
// some more varaiables used only main  
ofstream outfile;  
ifstream infile;    
char input_file_name[21], output_file_name[21], name[nameLength+1], id[idLength+1];  
  
void showmenu()  
{  
  cout<< "Please type in  one of the following options: \n";  
  cout<< "L or l  to load the employee list \n";  
  cout<< "D or d  to display  the employee data \n";  
  cout<< "P or p to process payroll\n";  
  cout<< "C or c to change an employee's wage \n";  
  cout<< "A or a to add a new employee \n";  
  cout<< "S or s to search for a particular employee's information \n";  
  cout<< "R or r to print the payroll results \n";  
  cout<< "M or m to display this menu \n";  
  cout<< "E or e to save and exit \n";  
}  
  
void loadEmployees()  
{  
  employee e_temp;  float hrsWorked[5];
  int deductions; float hrlyWage;
  cout << "Please enter name of the  data file:  ";  
  cin >> input_file_name;  
  infile.open(input_file_name);  
  if ( !infile)  
    {  
      // abandons operation with error mesg  
      cout << "Could not open input file \n";  
      infile.close();  
      infile.clear();  
      return;  
    }  
  infile >> name; e_temp.setName(name);
  while(!infile.eof())  
    {  
      infile >> id; e_temp.setId(id);  
      infile >> hrsWorked[0] >> hrsWorked[1]  
	     >> hrsWorked[2] >> hrsWorked[3] 
             >> hrsWorked[4];
      e_temp.setHours(hrsWorked);
      infile >> hrlyWage; e_temp.setWage(hrlyWage);   
      infile >> deductions; e_temp.setDeducts(deductions);  
      addEmployee(e_temp);
      infile >> name; e_temp.setName(name);
    }  

  infile.close();  
  infile.clear();  
}  
  
void displayData()
{
  writeData(cout);
}

void processThePayroll()  
{  
  // No further input is needed from the user.
  // Simply call function that processes the list.
  processEmpList();
}  
  
  
void changeWages()  
{  
  bool found = false; float wage;  
  cout << "Please enter id of the person:  ";  
  cin >> id;  
  employee& e =  searchById(id, found);  
  if ( found)  
    { 
      cout << "Current wage for " << e.getName()  
	   << " is: " << e.getWage()  << endl; 
      cout << "Please input new hourly wage:  ";  
      cin >> wage;  
      e.setWage(wage);  
    }  
  else  
    cout << "Sorry, there is no such employee \n";  
}  
  
void addNewEmployee()  
{  
  employee e_temp;  
  float hrsWorked[5];
  int deductions; float hrlyWage;
  
  cout << "Please enter name of the person:  ";  
  cin >> name; e_temp.setName(name);
  cout << "Please enter id of the person:  ";  
  cin >> id; e_temp.setId(id);  
  cout << "Please input hours worked:  ";
  cin >> hrsWorked[0] >> hrsWorked[1]  
      >> hrsWorked[2] >> hrsWorked[3] 
      >> hrsWorked[4];
  e_temp.setHours(hrsWorked);
  cout << "Please input hourly wage:  ";  
  cin >> hrlyWage; e_temp.setWage(hrlyWage);   
  cout << "Please input deductions:  ";  
  cin >> deductions; e_temp.setDeducts(deductions);  
  if (addEmployee(e_temp))  
    cout << "Successfully added  employee \n";  
  else  
    cout << "Sorry, the employee could not be added \n";  
}  
  
  
void searchAnEmployee()  
{  
 int i; bool found = false;  
   
 cout << "Please enter 1 to search by name and 2 to search by id:  ";  
 cin >> i;  
 if(i == 1)  
   {  
     cout << "Please enter name of the person:  ";  
     cin >> name;  
     employee& e1 = searchByName(name, found);  
     if (found)  
       e1.printPersonalInfo( cout);   
     else  
       cout << "Sorry, the employee could not be found \n";  
   }  
 else if(i ==2)  
   {  
     cout << "Please enter id of the person:  ";  
     cin >> id;  
     employee& e1= searchById(id, found);  
     if (found)  
       e1.printPersonalInfo(cout);   
     else  
       cout << "Sorry, the employee could not be found \n";  
   }  
  
      
}  
  
void printPayroll()  
{  
  cout << "Please enter name of output  file:  ";  
  cin >> output_file_name;  
  outfile.open(output_file_name);  
  printTable(outfile);  
  outfile.close();
  outfile.clear();
}  
  
void saveInfo()  
{  
  cout << "Please enter name of output  file:  ";  
  cin >> output_file_name;  
  outfile.open(output_file_name);  
  writeData(outfile);  
}  
  
  
/* ---------------------- start of Main Program -----------------------------*/  
  
  
int main()  
{  
  
  char choice;  
    
  showmenu();  
  cout << "Please indicate your choice of operation (m for menu): ";  
  cin >> choice;  
  
  while ((choice != 'e')&& (choice != 'E'))  
    {  
      switch(choice)  
	{  
	case 'l':  
	case 'L': loadEmployees(); break;  
        case 'd':
	case 'D': displayData(); break;
	case 'p':  
	case 'P': processThePayroll();break;  
	case 'c':  
	case 'C': changeWages();break;  
	case 'a':  
	case 'A': addNewEmployee();break;  
	case 's':  
	case 'S': searchAnEmployee();break;  
	case 'r':  
	case 'R': printPayroll();break;  
	case 'm':  
	case 'M': showmenu();break;  
	default : cout << "Not a valid choice" << endl;  
	}  
      cin.ignore(200, '\n'); cin.clear(); //clear out all input  
      cout << "Please indicate your choice of operation (m for menu): ";  
      cin >> choice;  
    }  
  saveInfo();  
  cout << "Thank-you, good bye! \n";  
}  
  
